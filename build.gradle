buildscript {
   ext.project_version = '3.2.0'
   ext.group_id = 'com.esentri.oss'
   ext.project_name = 'wrabbit-mq'

   ext.amqp_client_version = '5.6.0'

   ext.kotlin_version = '1.3.20' // if you change the version here, also change it in the plugin section
   ext.dokka_version = '0.9.17'

   ext.slf4j_version = '1.7.25'
   ext.logback_version = '1.2.3'

   repositories {
      mavenCentral()
   }

   dependencies {
      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
      classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"

      // for docker
      classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.8.12'
   }
}

plugins {
   id 'org.jetbrains.kotlin.jvm' version '1.3.20'
}

repositories {
   mavenCentral()
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
//apply plugin: 'org.jetbrains.dokka' // not compatible with JDK 11 (yet)
apply plugin: 'docker-compose'

version = project_version
group = group_id

dependencies {
   compile "com.rabbitmq:amqp-client:$amqp_client_version"
   compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
   compile "org.slf4j:slf4j-api:$slf4j_version"
   testCompile "ch.qos.logback:logback-classic:$logback_version"
   testCompile "org.junit.jupiter:junit-jupiter-engine:5.0.0"
   testCompile "org.junit.jupiter:junit-jupiter-api:5.0.0"
   testCompile group: 'org.easytesting', name: 'fest-assert', version: '1.4'
}

test {
   useJUnitPlatform()
}

compileKotlin {
   kotlinOptions {
      jvmTarget = "1.8"
   }
}

compileTestKotlin {
   kotlinOptions {
      jvmTarget = "1.8"
   }
}

task sourceJar(type: Jar) {
   archiveClassifier.set('sources')
   from sourceSets.main.allSource
}

// not compatible with JDK 11 (yet). instead, the next task is used
//task javadocJar(type: Jar, dependsOn: dokka) {
//   archiveClassifier.set('sources')
//   from javaDocDir
//}

def javaDocDir = "$buildDir/docs/javadoc"

javadoc {
   exclude 'module-info.java'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
   archiveClassifier.set('javadoc')
   from javaDocDir
}

if (project.hasProperty('publishFlag')) {

   // the archive 'jar' is added automatically to artifacts due to the java plugin
   // -> adding it here again will cause an exception because it will sign the same archive twice
   artifacts {
      archives sourceJar
      archives javadocJar
   }

   signing {
      sign configurations.archives
   }

   publishing {
      publications {
         mavenJava(MavenPublication) {
            customizePom(pom)
            groupId group_id
            artifactId project_name
            version project_version

            from components.java

            // create the sign pom artifact
            pom.withXml {
               def pomFile = file("${project.buildDir}/generated-pom.xml")
               writeTo(pomFile)
               def pomAscFile = signing.sign(pomFile).signatureFiles[0]
               artifact(pomAscFile) {
                  classifier = null
                  extension = 'pom.asc'
               }
            }

            artifact(sourceJar) {
               classifier = 'sources'
            }
            artifact(javadocJar) {
               classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
               artifact(it) {
                  def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                  if (matcher.find()) {
                     classifier = matcher.group(1)
                  } else {
                     classifier = null
                  }
                  extension = 'jar.asc'
               }
            }
         }
      }

      repositories {
         maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
               username project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : ''
               password project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : ''
            }
         }
      }
   }

   model {
      tasks.generatePomFileForMavenJavaPublication {
         destination = file("$buildDir/generated-pom.xml")
      }
      tasks.publishMavenJavaPublicationToMavenLocal {
         dependsOn project.tasks.signArchives
      }
      tasks.publishMavenJavaPublicationToMavenRepository {
         dependsOn project.tasks.signArchives
      }
   }

   // not compatible with JDK 11 (yet)
//   dokka {
//      outputFormat = 'javadoc'
//      outputDirectory = javaDocDir
//      reportUndocumented = false
//   }
}

def customizePom(pom) {
   pom.withXml {
      def root = asNode()

      // eliminate test-scoped dependencies (no need in maven central POMs)
      root.dependencies.removeAll { dep ->
         dep.scope == "test"
      }

      // add all items necessary for maven central publication
      root.children().last() + {
         resolveStrategy = Closure.DELEGATE_FIRST

         description 'A simple yet sophisticated wrapper for RabbitMQ'
         name project_name
         url 'https://github.com/esentri/wrabbit-mq'
         organization {
            name 'com.github.esentri'
            url 'https://github.com/esentri'
         }
         issueManagement {
            system 'GitHub'
            url 'https://github.com/esentri/wrabbit-mq/issues'
         }
         licenses {
            license {
               name 'MIT'
               url 'https://github.com/esentri/wrabbit-mq/blob/master/README.md'
               distribution 'repo'
            }
         }
         scm {
            url 'https://github.com/esentri/wrabbit-mq'
            connection 'scm:git:git://github.com/esentri/wrabbit-mq.git'
            developerConnection 'scm:git:ssh://git@github.com:esentri/wrabbit-mq.git'
         }
         developers {
            developer {
               name 'Maurice MÃ¼ller'
               organization 'esentri AG'
               organizationUrl 'https://www.esentri.com/'
            }
            developer {
               name 'esentri AG'
               organization 'esentri AG'
               organizationUrl 'https://www.esentri.com/'
            }
         }
      }
   }
}


dockerCompose {
   rabbit {
      useComposeFiles = ["./src/test/resources/docker/docker-compose.yml"]
      startedServices = ["test-rabbitmq"]
      tcpPortsToIgnoreWhenWaiting = [15672]
   }
}

test.dependsOn rabbitComposeUp
test.finalizedBy rabbitComposeDownForced